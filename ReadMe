/*---------------------------------------------------------------------------
FileName:	  Readme
Authors:          Niharika Karia, Shiva Naveen Ravi, Shiv Ram Krishna
Purpose:          To implement the functions of a Record manager.
Language:         C
Dev OS:           ubuntu 14.04 LTS (Unix Environment)
Reference:	  Course CS525,IIT CHICAGO
Created On:       29 November,2015
Last Modified On: 02 December, 2015 
----------------------------------------------------------------------------*/

1.)Assignment Problem : In this assignment we implemented a B+Tree Index. The index is be backed up by a page file and pages of the index are accessed through the buffer manager. The design allows each node occupy a full page. A B+-tree stores pointer to records index by a keys of a given datatype. The development Language we used to implement the solution is C.
 
2.)Following are the Functions that we implemented as found in file record_mgr.h to perform its task :-

extern RC initIndexManager (void *mgmtData);
extern RC shutdownIndexManager ();
extern RC createBtree (char *idxId, DataType keyType, int n);
extern RC openBtree (BTreeHandle **tree, char *idxId);
extern RC closeBtree (BTreeHandle *tree);
extern RC deleteBtree (char *idxId);
extern RC getNumNodes (BTreeHandle *tree, int *result);
extern RC getNumEntries (BTreeHandle *tree, int *result);
extern RC getKeyType (BTreeHandle *tree, DataType *result);
extern RC findKey (BTreeHandle *tree, Value *key, RID *result);
extern RC insertKey (BTreeHandle *tree, Value *key, RID rid);
extern RC deleteKey (BTreeHandle *tree, Value *key);
extern RC openTreeScan (BTreeHandle *tree, BT_ScanHandle **handle);
extern RC nextEntry (BT_ScanHandle *handle, RID *result);
extern RC closeTreeScan (BT_ScanHandle *handle);


3.)The test cases as found in the file test_assign4_1.c of the b+tree implementation are as follows :-

	testInsertAndFind: This module opens a B+tree and inserts a set number of keys into the tree. Later it checks the number of nodes and total number of entries in the B+tree.After inserts, the key search is done. The searched key value is matched with the desired key. The B+tree is deleted after the operatiins are completed.
	testDelete: This module opens a B+tree and inserts a set number of keys into the tree. Later it generates a set number of random keys which will be deleted from the tree. After a key is deleted, the find key module it called to confirm that the desired key was deleted successfully. After successful confirmation the B+tree is closed and deleted.
	testIndexScan: This opens a B+tree and inserts a set number of keys into the tree. Later it sequentially scans the entries in the tree. The input is permutated and then scanned to check the correct input order. In our inmplementation, the permuted values are not inserted correctly hence to simplify, we have edited this module to compare the fixed input instead of permutated input in the scan order.
	
4.)Data Structure Description: We are using the data structure BTreeNode to store the information about the B+tree node. This contains the count of the keys that exist in the node. A boolean flag to distinguis a leaf node from the parent node. The page number of the 2 keys, as well as the next leaf information.
				We are using BTreeStack, which stores the information about a key present on a node. The node's parent page number and the index of the key in that node.
				We are using the data structure BTreeInfo to store the information about the B+tree. The holds the count of nodes and count of keys. This also saves the page of root page wich is extrremely handy.
5.) Extra Functionality Added: We have added 2 new functions. UpdateKey and Rearrange key. These functions are invoked from within other function (insert key) when there is a node overflow. The UpdateKey is used in case of leaf nodes. The rearrange method is used in case of parent nodes.
	 		       We have fixed the memory leaks from all files. Pointers to intermediate nodes are represented by the page number of the page the node is stored in.

6.)Some basic return types have been defined in the file dberror.h We have included our custom return types status along with the basic defined return type status for some enhanced validations in the file dberror.h 

7)Execution Environment : We have performed all the development, testing and documentation of this version of Record manager on c language, and geditor respectively installed on a linux box (Ubuntu 14.04 LTS).
 
    * The repository also consists of a makefile. All the compilation related management work is being taken care of by the make file.To compile our program we need to type  make
 that generates an executable file named BtreeManager. This file is executed as by typing ./BtreeManager
that initiates call to the test_assign4_1.c file that ensures the execution of our program.
The path of the makefile shall be changed to the current directory from where make would be executed. The path variable is specified in the line1 of the makefile.

In case of any queries or problems, kindly feel free to contact us.